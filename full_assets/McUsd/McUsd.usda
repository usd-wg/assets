#usda 1.0
(
    """
# USDA 1.0 file made by Mineways version 10.05, http://mineways.com
# World: _Simple Material Test
# Terrain file name: C:\\Users\\Eric\\Downloads\\minewaysV1004\\mineways\\terrainExt_JG-RTX256.png
# Color scheme: Standard
# Tue Nov 29 12:26:21 2022

# Selection location min to max: 181, 3, -95 to 193, 319, -83
#   Non-empty selection location min to max: 181, 3, -95 to 193, 5, -83

# Set render type: USD 1.0
# Units for the model vertex data itself: meters

# 476 vertices, 440 faces (880 triangles), 179 blocks, 7 billboards/bits
# block dimensions: X=13 by Y=4 (height) by Z=13 blocks
# Elevation shading: no
# Lighting: no
# Transparent water: no
# Map grid: no
# File type: Export individual textures to directory tex
# Texture output RGB: YES
# Texture output A: YES
# Texture output RGBA: YES
# Individual blocks: no
# G3D full material: no
# Export MDL: no
# Light scale: 30.000000
# Surface emit scale: 1000.000000
# Make Z the up direction instead of Y: no
# Create composite overlay faces: no
# Center model: YES
# Export lesser blocks: YES
# Fatten lesser blocks: no
# Create block faces at the borders: YES
# Make tree leaves solid: no
# Use biomes: no
# Rotate model 0.000000 degrees
# Scale model by making each block 1000 mm high
# Data operation options:
#   Fill air bubbles: no; Seal off entrances: no; Fill in isolated tunnels in base of model: no
#   Connect parts sharing an edge: no; Connect corner tips: no; Weld all shared edges: no
#   Delete floating objects: trees and parts smaller than 16 blocks: no
#   Hollow out bottom of model, making the walls 1000 mm thick: no; Superhollow: no
# Melt snow blocks: no
#   Debug: show separate parts as colors: no
#   Debug: show weld blocks in bright colors: no

# Full world path: C:\\Users\\Eric\\AppData\\Roaming\\.minecraft\\saves\\_Simple Material Test
# Full terrainExt.png path: C:\\Users\\Eric\\Downloads\\minewaysV1004\\mineways\\terrainExt_JG-RTX256.png
# Full current path: C:\\Users\\Eric\\Documents\\GitHub\\Mineways\\x64\\Release
"""
    customLayerData = {
        dictionary cameraSettings = {
            string boundCamera = "/Camera"
        }
        dictionary renderSettings = {
            bool "rtx:raytracing:fractionalCutoutOpacity" = 1
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "McUsd"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Camera "Camera" (
    hide_in_stage_window = false
    no_delete = false
)
{
    float4[] clippingPlanes = []
    float2 clippingRange = (1, 10000000)
    float focalLength = 18.147562
    float focusDistance = 0
    float fStop = 0
    float horizontalAperture = 20.955
    float horizontalApertureOffset = 0
    custom vector3d omni:kit:centerOfInterest = (0, 0, -850)
    token projection = "perspective"
    uniform token purpose = "default"
    double shutter:close = 0
    double shutter:open = 0
    uniform token stereoRole = "mono"
    float verticalAperture = 15.2908
    float verticalApertureOffset = 0
    token visibility = "inherited"
    float3 xformOp:rotateZXY = (-35, 45, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (535, 535, 535)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZXY", "xformOp:scale"]
}

def DistantLight "Sun" (
    prepend apiSchemas = ["ShapingAPI"]
    kind = "model"
)
{
    float angle = 1
    float intensity = 1560
    float shaping:cone:angle = 180
    float shaping:cone:softness
    float shaping:focus
    color3f shaping:focusTint
    asset shaping:ies:file
    float3 xformOp:rotateZXY = (235, 325, 0)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZXY"]
}

def DomeLight "DomeLight" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float intensity = 312
    float shaping:cone:angle = 180
    float shaping:cone:softness
    float shaping:focus
    color3f shaping:focusTint
    asset shaping:ies:file
    asset texture:file = @./McUsd_materials/tex/_domelight.png@
    token texture:format = "latlong"
    float3 xformOp:rotateZXY = (270, 0, 0)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZXY"]
}

def Xform "McUsd"
{
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (100, 100, 100)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Mesh "grass_block_top" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643]
        rel material:binding = </Looks/grass_block_top>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
        point3f[] points = [(-6, 1, -5), (-5, 1, -5), (-5, 1, -6), (-6, 1, -6), (-6, 1, -4), (-5, 1, -4), (-5, 1, -5), (-6, 1, -5), (-6, 1, -3), (-5, 1, -3), (-5, 1, -4), (-6, 1, -4), (-6, 1, -2), (-5, 1, -2), (-5, 1, -3), (-6, 1, -3), (-6, 1, -1), (-5, 1, -1), (-5, 1, -2), (-6, 1, -2), (-6, 1, 0), (-5, 1, 0), (-5, 1, -1), (-6, 1, -1), (-6, 1, 1), (-5, 1, 1), (-5, 1, 0), (-6, 1, 0), (-6, 1, 2), (-5, 1, 2), (-5, 1, 1), (-6, 1, 1), (-6, 1, 3), (-5, 1, 3), (-5, 1, 2), (-6, 1, 2), (-6, 1, 4), (-5, 1, 4), (-5, 1, 3), (-6, 1, 3), (-6, 1, 5), (-5, 1, 5), (-5, 1, 4), (-6, 1, 4), (-6, 1, 6), (-5, 1, 6), (-5, 1, 5), (-6, 1, 5), (-6, 1, 7), (-5, 1, 7), (-5, 1, 6), (-6, 1, 6), (-5, 1, -5), (-4, 1, -5), (-4, 1, -6), (-5, 1, -6), (-5, 1, -4), (-4, 1, -4), (-4, 1, -5), (-5, 1, -5), (-5, 1, -3), (-4, 1, -3), (-4, 1, -4), (-5, 1, -4), (-5, 1, -2), (-4, 1, -2), (-4, 1, -3), (-5, 1, -3), (-5, 1, -1), (-4, 1, -1), (-4, 1, -2), (-5, 1, -2), (-5, 1, 0), (-4, 1, 0), (-4, 1, -1), (-5, 1, -1), (-5, 1, 1), (-4, 1, 1), (-4, 1, 0), (-5, 1, 0), (-5, 1, 2), (-4, 1, 2), (-4, 1, 1), (-5, 1, 1), (-5, 1, 3), (-4, 1, 3), (-4, 1, 2), (-5, 1, 2), (-5, 1, 4), (-4, 1, 4), (-4, 1, 3), (-5, 1, 3), (-5, 1, 5), (-4, 1, 5), (-4, 1, 4), (-5, 1, 4), (-5, 1, 6), (-4, 1, 6), (-4, 1, 5), (-5, 1, 5), (-5, 1, 7), (-4, 1, 7), (-4, 1, 6), (-5, 1, 6), (-4, 1, -5), (-3, 1, -5), (-3, 1, -6), (-4, 1, -6), (-4, 1, -4), (-3, 1, -4), (-3, 1, -5), (-4, 1, -5), (-4, 1, -3), (-3, 1, -3), (-3, 1, -4), (-4, 1, -4), (-4, 1, -2), (-3, 1, -2), (-3, 1, -3), (-4, 1, -3), (-4, 1, -1), (-3, 1, -1), (-3, 1, -2), (-4, 1, -2), (-4, 1, 0), (-3, 1, 0), (-3, 1, -1), (-4, 1, -1), (-4, 1, 1), (-3, 1, 1), (-3, 1, 0), (-4, 1, 0), (-4, 1, 2), (-3, 1, 2), (-3, 1, 1), (-4, 1, 1), (-4, 1, 3), (-3, 1, 3), (-3, 1, 2), (-4, 1, 2), (-4, 1, 4), (-3, 1, 4), (-3, 1, 3), (-4, 1, 3), (-4, 1, 5), (-3, 1, 5), (-3, 1, 4), (-4, 1, 4), (-4, 1, 6), (-3, 1, 6), (-3, 1, 5), (-4, 1, 5), (-4, 1, 7), (-3, 1, 7), (-3, 1, 6), (-4, 1, 6), (-3, 1, -5), (-2, 1, -5), (-2, 1, -6), (-3, 1, -6), (-3, 1, -4), (-2, 1, -4), (-2, 1, -5), (-3, 1, -5), (-3, 1, -3), (-2, 1, -3), (-2, 1, -4), (-3, 1, -4), (-3, 1, -2), (-2, 1, -2), (-2, 1, -3), (-3, 1, -3), (-3, 1, -1), (-2, 1, -1), (-2, 1, -2), (-3, 1, -2), (-3, 1, 0), (-2, 1, 0), (-2, 1, -1), (-3, 1, -1), (-3, 1, 1), (-2, 1, 1), (-2, 1, 0), (-3, 1, 0), (-3, 1, 2), (-2, 1, 2), (-2, 1, 1), (-3, 1, 1), (-3, 1, 3), (-2, 1, 3), (-2, 1, 2), (-3, 1, 2), (-3, 1, 4), (-2, 1, 4), (-2, 1, 3), (-3, 1, 3), (-3, 1, 5), (-2, 1, 5), (-2, 1, 4), (-3, 1, 4), (-3, 1, 6), (-2, 1, 6), (-2, 1, 5), (-3, 1, 5), (-3, 1, 7), (-2, 1, 7), (-2, 1, 6), (-3, 1, 6), (-2, 1, -5), (-1, 1, -5), (-1, 1, -6), (-2, 1, -6), (-2, 1, -4), (-1, 1, -4), (-1, 1, -5), (-2, 1, -5), (-2, 1, -3), (-1, 1, -3), (-1, 1, -4), (-2, 1, -4), (-2, 1, -2), (-1, 1, -2), (-1, 1, -3), (-2, 1, -3), (-2, 1, 0), (-1, 1, 0), (-1, 1, -1), (-2, 1, -1), (-2, 1, 2), (-1, 1, 2), (-1, 1, 1), (-2, 1, 1), (-2, 1, 4), (-1, 1, 4), (-1, 1, 3), (-2, 1, 3), (-2, 1, 5), (-1, 1, 5), (-1, 1, 4), (-2, 1, 4), (-2, 1, 6), (-1, 1, 6), (-1, 1, 5), (-2, 1, 5), (-2, 1, 7), (-1, 1, 7), (-1, 1, 6), (-2, 1, 6), (-1, 1, -5), (0, 1, -5), (0, 1, -6), (-1, 1, -6), (-1, 1, -4), (0, 1, -4), (0, 1, -5), (-1, 1, -5), (-1, 1, -3), (0, 1, -3), (0, 1, -4), (-1, 1, -4), (-1, 1, -2), (0, 1, -2), (0, 1, -3), (-1, 1, -3), (-1, 1, -1), (0, 1, -1), (0, 1, -2), (-1, 1, -2), (-1, 1, 0), (0, 1, 0), (0, 1, -1), (-1, 1, -1), (-1, 1, 1), (0, 1, 1), (0, 1, 0), (-1, 1, 0), (-1, 1, 2), (0, 1, 2), (0, 1, 1), (-1, 1, 1), (-1, 1, 3), (0, 1, 3), (0, 1, 2), (-1, 1, 2), (-1, 1, 4), (0, 1, 4), (0, 1, 3), (-1, 1, 3), (-1, 1, 5), (0, 1, 5), (0, 1, 4), (-1, 1, 4), (-1, 1, 6), (0, 1, 6), (0, 1, 5), (-1, 1, 5), (-1, 1, 7), (0, 1, 7), (0, 1, 6), (-1, 1, 6), (0, 1, -5), (1, 1, -5), (1, 1, -6), (0, 1, -6), (0, 1, -4), (1, 1, -4), (1, 1, -5), (0, 1, -5), (0, 1, -3), (1, 1, -3), (1, 1, -4), (0, 1, -4), (0, 1, -2), (1, 1, -2), (1, 1, -3), (0, 1, -3), (0, 1, 0), (1, 1, 0), (1, 1, -1), (0, 1, -1), (0, 1, 2), (1, 1, 2), (1, 1, 1), (0, 1, 1), (0, 1, 3), (1, 1, 3), (1, 1, 2), (0, 1, 2), (0, 1, 4), (1, 1, 4), (1, 1, 3), (0, 1, 3), (0, 1, 5), (1, 1, 5), (1, 1, 4), (0, 1, 4), (0, 1, 6), (1, 1, 6), (1, 1, 5), (0, 1, 5), (0, 1, 7), (1, 1, 7), (1, 1, 6), (0, 1, 6), (1, 1, -5), (2, 1, -5), (2, 1, -6), (1, 1, -6), (1, 1, -4), (2, 1, -4), (2, 1, -5), (1, 1, -5), (1, 1, -3), (2, 1, -3), (2, 1, -4), (1, 1, -4), (1, 1, -2), (2, 1, -2), (2, 1, -3), (1, 1, -3), (1, 1, -1), (2, 1, -1), (2, 1, -2), (1, 1, -2), (1, 1, 0), (2, 1, 0), (2, 1, -1), (1, 1, -1), (1, 1, 2), (2, 1, 2), (2, 1, 1), (1, 1, 1), (1, 1, 3), (2, 1, 3), (2, 1, 2), (1, 1, 2), (1, 1, 4), (2, 1, 4), (2, 1, 3), (1, 1, 3), (1, 1, 5), (2, 1, 5), (2, 1, 4), (1, 1, 4), (1, 1, 6), (2, 1, 6), (2, 1, 5), (1, 1, 5), (1, 1, 7), (2, 1, 7), (2, 1, 6), (1, 1, 6), (2, 1, -5), (3, 1, -5), (3, 1, -6), (2, 1, -6), (2, 1, -4), (3, 1, -4), (3, 1, -5), (2, 1, -5), (2, 1, -3), (3, 1, -3), (3, 1, -4), (2, 1, -4), (2, 1, -2), (3, 1, -2), (3, 1, -3), (2, 1, -3), (2, 1, 0), (3, 1, 0), (3, 1, -1), (2, 1, -1), (2, 1, 1), (3, 1, 1), (3, 1, 0), (2, 1, 0), (2, 1, 3), (3, 1, 3), (3, 1, 2), (2, 1, 2), (2, 1, 4), (3, 1, 4), (3, 1, 3), (2, 1, 3), (2, 1, 5), (3, 1, 5), (3, 1, 4), (2, 1, 4), (2, 1, 6), (3, 1, 6), (3, 1, 5), (2, 1, 5), (2, 1, 7), (3, 1, 7), (3, 1, 6), (2, 1, 6), (3, 1, -5), (4, 1, -5), (4, 1, -6), (3, 1, -6), (3, 1, -4), (4, 1, -4), (4, 1, -5), (3, 1, -5), (3, 1, -3), (4, 1, -3), (4, 1, -4), (3, 1, -4), (3, 1, -2), (4, 1, -2), (4, 1, -3), (3, 1, -3), (3, 1, -1), (4, 1, -1), (4, 1, -2), (3, 1, -2), (3, 1, 0), (4, 1, 0), (4, 1, -1), (3, 1, -1), (3, 1, 1), (4, 1, 1), (4, 1, 0), (3, 1, 0), (3, 1, 2), (4, 1, 2), (4, 1, 1), (3, 1, 1), (3, 1, 3), (4, 1, 3), (4, 1, 2), (3, 1, 2), (3, 1, 4), (4, 1, 4), (4, 1, 3), (3, 1, 3), (3, 1, 5), (4, 1, 5), (4, 1, 4), (3, 1, 4), (3, 1, 6), (4, 1, 6), (4, 1, 5), (3, 1, 5), (3, 1, 7), (4, 1, 7), (4, 1, 6), (3, 1, 6), (4, 1, -5), (5, 1, -5), (5, 1, -6), (4, 1, -6), (4, 1, -4), (5, 1, -4), (5, 1, -5), (4, 1, -5), (4, 1, -3), (5, 1, -3), (5, 1, -4), (4, 1, -4), (4, 1, -2), (5, 1, -2), (5, 1, -3), (4, 1, -3), (4, 1, -1), (5, 1, -1), (5, 1, -2), (4, 1, -2), (4, 1, 0), (5, 1, 0), (5, 1, -1), (4, 1, -1), (4, 1, 1), (5, 1, 1), (5, 1, 0), (4, 1, 0), (4, 1, 2), (5, 1, 2), (5, 1, 1), (4, 1, 1), (4, 1, 3), (5, 1, 3), (5, 1, 2), (4, 1, 2), (4, 1, 4), (5, 1, 4), (5, 1, 3), (4, 1, 3), (4, 1, 5), (5, 1, 5), (5, 1, 4), (4, 1, 4), (4, 1, 6), (5, 1, 6), (5, 1, 5), (4, 1, 5), (4, 1, 7), (5, 1, 7), (5, 1, 6), (4, 1, 6), (5, 1, -5), (6, 1, -5), (6, 1, -6), (5, 1, -6), (5, 1, -4), (6, 1, -4), (6, 1, -5), (5, 1, -5), (5, 1, -3), (6, 1, -3), (6, 1, -4), (5, 1, -4), (5, 1, -2), (6, 1, -2), (6, 1, -3), (5, 1, -3), (5, 1, -1), (6, 1, -1), (6, 1, -2), (5, 1, -2), (5, 1, 0), (6, 1, 0), (6, 1, -1), (5, 1, -1), (5, 1, 1), (6, 1, 1), (6, 1, 0), (5, 1, 0), (5, 1, 2), (6, 1, 2), (6, 1, 1), (5, 1, 1), (5, 1, 3), (6, 1, 3), (6, 1, 2), (5, 1, 2), (5, 1, 4), (6, 1, 4), (6, 1, 3), (5, 1, 3), (5, 1, 5), (6, 1, 5), (6, 1, 4), (5, 1, 4), (5, 1, 6), (6, 1, 6), (6, 1, 5), (5, 1, 5), (5, 1, 7), (6, 1, 7), (6, 1, 6), (5, 1, 6), (6, 1, -5), (7, 1, -5), (7, 1, -6), (6, 1, -6), (6, 1, -4), (7, 1, -4), (7, 1, -5), (6, 1, -5), (6, 1, -3), (7, 1, -3), (7, 1, -4), (6, 1, -4), (6, 1, -2), (7, 1, -2), (7, 1, -3), (6, 1, -3), (6, 1, -1), (7, 1, -1), (7, 1, -2), (6, 1, -2), (6, 1, 0), (7, 1, 0), (7, 1, -1), (6, 1, -1), (6, 1, 1), (7, 1, 1), (7, 1, 0), (6, 1, 0), (6, 1, 2), (7, 1, 2), (7, 1, 1), (6, 1, 1), (6, 1, 3), (7, 1, 3), (7, 1, 2), (6, 1, 2), (6, 1, 4), (7, 1, 4), (7, 1, 3), (6, 1, 3), (6, 1, 5), (7, 1, 5), (7, 1, 4), (6, 1, 4), (6, 1, 6), (7, 1, 6), (7, 1, 5), (6, 1, 5), (6, 1, 7), (7, 1, 7), (7, 1, 6), (6, 1, 6)]
        texCoord2f[] primvars:st = [(0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (0, 0), (1, 0), (1, 1), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 1), (0, 1), (0, 0), (1, 0)] (
            interpolation = "vertex"
        )
    }

    def Mesh "dirt" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671]
        rel material:binding = </Looks/dirt>
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0)]
        point3f[] points = [(-5, 0, -5), (-6, 0, -5), (-6, 0, -6), (-5, 0, -6), (-5, 0, -4), (-6, 0, -4), (-6, 0, -5), (-5, 0, -5), (-5, 0, -3), (-6, 0, -3), (-6, 0, -4), (-5, 0, -4), (-5, 0, -2), (-6, 0, -2), (-6, 0, -3), (-5, 0, -3), (-5, 0, -1), (-6, 0, -1), (-6, 0, -2), (-5, 0, -2), (-5, 0, 0), (-6, 0, 0), (-6, 0, -1), (-5, 0, -1), (-5, 0, 1), (-6, 0, 1), (-6, 0, 0), (-5, 0, 0), (-5, 0, 2), (-6, 0, 2), (-6, 0, 1), (-5, 0, 1), (-5, 0, 3), (-6, 0, 3), (-6, 0, 2), (-5, 0, 2), (-5, 0, 4), (-6, 0, 4), (-6, 0, 3), (-5, 0, 3), (-5, 0, 5), (-6, 0, 5), (-6, 0, 4), (-5, 0, 4), (-5, 0, 6), (-6, 0, 6), (-6, 0, 5), (-5, 0, 5), (-5, 0, 7), (-6, 0, 7), (-6, 0, 6), (-5, 0, 6), (-4, 0, -5), (-5, 0, -5), (-5, 0, -6), (-4, 0, -6), (-4, 0, -4), (-5, 0, -4), (-5, 0, -5), (-4, 0, -5), (-4, 0, -3), (-5, 0, -3), (-5, 0, -4), (-4, 0, -4), (-4, 0, -2), (-5, 0, -2), (-5, 0, -3), (-4, 0, -3), (-4, 0, -1), (-5, 0, -1), (-5, 0, -2), (-4, 0, -2), (-4, 0, 0), (-5, 0, 0), (-5, 0, -1), (-4, 0, -1), (-4, 0, 1), (-5, 0, 1), (-5, 0, 0), (-4, 0, 0), (-4, 0, 2), (-5, 0, 2), (-5, 0, 1), (-4, 0, 1), (-4, 0, 3), (-5, 0, 3), (-5, 0, 2), (-4, 0, 2), (-4, 0, 4), (-5, 0, 4), (-5, 0, 3), (-4, 0, 3), (-4, 0, 5), (-5, 0, 5), (-5, 0, 4), (-4, 0, 4), (-4, 0, 6), (-5, 0, 6), (-5, 0, 5), (-4, 0, 5), (-4, 0, 7), (-5, 0, 7), (-5, 0, 6), (-4, 0, 6), (-3, 0, -5), (-4, 0, -5), (-4, 0, -6), (-3, 0, -6), (-3, 0, -4), (-4, 0, -4), (-4, 0, -5), (-3, 0, -5), (-3, 0, -3), (-4, 0, -3), (-4, 0, -4), (-3, 0, -4), (-3, 0, -2), (-4, 0, -2), (-4, 0, -3), (-3, 0, -3), (-3, 0, -1), (-4, 0, -1), (-4, 0, -2), (-3, 0, -2), (-3, 0, 0), (-4, 0, 0), (-4, 0, -1), (-3, 0, -1), (-3, 0, 1), (-4, 0, 1), (-4, 0, 0), (-3, 0, 0), (-3, 0, 2), (-4, 0, 2), (-4, 0, 1), (-3, 0, 1), (-3, 0, 3), (-4, 0, 3), (-4, 0, 2), (-3, 0, 2), (-3, 0, 4), (-4, 0, 4), (-4, 0, 3), (-3, 0, 3), (-3, 0, 5), (-4, 0, 5), (-4, 0, 4), (-3, 0, 4), (-3, 0, 6), (-4, 0, 6), (-4, 0, 5), (-3, 0, 5), (-3, 0, 7), (-4, 0, 7), (-4, 0, 6), (-3, 0, 6), (-2, 0, -5), (-3, 0, -5), (-3, 0, -6), (-2, 0, -6), (-2, 0, -4), (-3, 0, -4), (-3, 0, -5), (-2, 0, -5), (-2, 0, -3), (-3, 0, -3), (-3, 0, -4), (-2, 0, -4), (-2, 0, -2), (-3, 0, -2), (-3, 0, -3), (-2, 0, -3), (-2, 0, -1), (-3, 0, -1), (-3, 0, -2), (-2, 0, -2), (-2, 0, 0), (-3, 0, 0), (-3, 0, -1), (-2, 0, -1), (-2, 0, 1), (-3, 0, 1), (-3, 0, 0), (-2, 0, 0), (-2, 0, 2), (-3, 0, 2), (-3, 0, 1), (-2, 0, 1), (-2, 0, 3), (-3, 0, 3), (-3, 0, 2), (-2, 0, 2), (-2, 0, 4), (-3, 0, 4), (-3, 0, 3), (-2, 0, 3), (-2, 0, 5), (-3, 0, 5), (-3, 0, 4), (-2, 0, 4), (-2, 0, 6), (-3, 0, 6), (-3, 0, 5), (-2, 0, 5), (-2, 0, 7), (-3, 0, 7), (-3, 0, 6), (-2, 0, 6), (-1, 0, -5), (-2, 0, -5), (-2, 0, -6), (-1, 0, -6), (-1, 0, -4), (-2, 0, -4), (-2, 0, -5), (-1, 0, -5), (-1, 0, -3), (-2, 0, -3), (-2, 0, -4), (-1, 0, -4), (-1, 0, -2), (-2, 0, -2), (-2, 0, -3), (-1, 0, -3), (-1, 0, 0), (-2, 0, 0), (-2, 0, -1), (-1, 0, -1), (-1, 0, 2), (-2, 0, 2), (-2, 0, 1), (-1, 0, 1), (-1, 0, 3), (-2, 0, 3), (-2, 0, 2), (-1, 0, 2), (-1, 0, 4), (-2, 0, 4), (-2, 0, 3), (-1, 0, 3), (-1, 0, 5), (-2, 0, 5), (-2, 0, 4), (-1, 0, 4), (-1, 0, 6), (-2, 0, 6), (-2, 0, 5), (-1, 0, 5), (-1, 0, 7), (-2, 0, 7), (-2, 0, 6), (-1, 0, 6), (0, 0, -5), (-1, 0, -5), (-1, 0, -6), (0, 0, -6), (0, 0, -4), (-1, 0, -4), (-1, 0, -5), (0, 0, -5), (0, 0, -3), (-1, 0, -3), (-1, 0, -4), (0, 0, -4), (0, 0, -2), (-1, 0, -2), (-1, 0, -3), (0, 0, -3), (0, 0, -1), (-1, 0, -1), (-1, 0, -2), (0, 0, -2), (0, 0, 0), (-1, 0, 0), (-1, 0, -1), (0, 0, -1), (0, 0, 1), (-1, 0, 1), (-1, 0, 0), (0, 0, 0), (0, 0, 2), (-1, 0, 2), (-1, 0, 1), (0, 0, 1), (0, 0, 3), (-1, 0, 3), (-1, 0, 2), (0, 0, 2), (0, 0, 4), (-1, 0, 4), (-1, 0, 3), (0, 0, 3), (0, 0, 5), (-1, 0, 5), (-1, 0, 4), (0, 0, 4), (0, 0, 6), (-1, 0, 6), (-1, 0, 5), (0, 0, 5), (0, 0, 7), (-1, 0, 7), (-1, 0, 6), (0, 0, 6), (1, 0, -5), (0, 0, -5), (0, 0, -6), (1, 0, -6), (1, 0, -4), (0, 0, -4), (0, 0, -5), (1, 0, -5), (1, 0, -3), (0, 0, -3), (0, 0, -4), (1, 0, -4), (1, 0, -2), (0, 0, -2), (0, 0, -3), (1, 0, -3), (1, 0, 0), (0, 0, 0), (0, 0, -1), (1, 0, -1), (1, 0, 2), (0, 0, 2), (0, 0, 1), (1, 0, 1), (1, 0, 3), (0, 0, 3), (0, 0, 2), (1, 0, 2), (1, 0, 4), (0, 0, 4), (0, 0, 3), (1, 0, 3), (1, 0, 5), (0, 0, 5), (0, 0, 4), (1, 0, 4), (1, 0, 6), (0, 0, 6), (0, 0, 5), (1, 0, 5), (1, 0, 7), (0, 0, 7), (0, 0, 6), (1, 0, 6), (2, 0, -5), (1, 0, -5), (1, 0, -6), (2, 0, -6), (2, 0, -4), (1, 0, -4), (1, 0, -5), (2, 0, -5), (2, 0, -3), (1, 0, -3), (1, 0, -4), (2, 0, -4), (2, 0, -2), (1, 0, -2), (1, 0, -3), (2, 0, -3), (2, 0, -1), (1, 0, -1), (1, 0, -2), (2, 0, -2), (2, 0, 0), (1, 0, 0), (1, 0, -1), (2, 0, -1), (2, 0, 2), (1, 0, 2), (1, 0, 1), (2, 0, 1), (2, 0, 3), (1, 0, 3), (1, 0, 2), (2, 0, 2), (2, 0, 4), (1, 0, 4), (1, 0, 3), (2, 0, 3), (2, 0, 5), (1, 0, 5), (1, 0, 4), (2, 0, 4), (2, 0, 6), (1, 0, 6), (1, 0, 5), (2, 0, 5), (2, 0, 7), (1, 0, 7), (1, 0, 6), (2, 0, 6), (3, 0, -5), (2, 0, -5), (2, 0, -6), (3, 0, -6), (3, 0, -4), (2, 0, -4), (2, 0, -5), (3, 0, -5), (3, 0, -3), (2, 0, -3), (2, 0, -4), (3, 0, -4), (3, 0, -2), (2, 0, -2), (2, 0, -3), (3, 0, -3), (3, 0, 0), (2, 0, 0), (2, 0, -1), (3, 0, -1), (3, 0, 1), (2, 0, 1), (2, 0, 0), (3, 0, 0), (3, 0, 3), (2, 0, 3), (2, 0, 2), (3, 0, 2), (3, 0, 4), (2, 0, 4), (2, 0, 3), (3, 0, 3), (3, 0, 5), (2, 0, 5), (2, 0, 4), (3, 0, 4), (3, 0, 6), (2, 0, 6), (2, 0, 5), (3, 0, 5), (3, 0, 7), (2, 0, 7), (2, 0, 6), (3, 0, 6), (4, 0, -5), (3, 0, -5), (3, 0, -6), (4, 0, -6), (4, 0, -4), (3, 0, -4), (3, 0, -5), (4, 0, -5), (4, 0, -3), (3, 0, -3), (3, 0, -4), (4, 0, -4), (4, 0, -2), (3, 0, -2), (3, 0, -3), (4, 0, -3), (4, 0, -1), (3, 0, -1), (3, 0, -2), (4, 0, -2), (4, 0, 0), (3, 0, 0), (3, 0, -1), (4, 0, -1), (4, 0, 1), (3, 0, 1), (3, 0, 0), (4, 0, 0), (4, 0, 2), (3, 0, 2), (3, 0, 1), (4, 0, 1), (4, 0, 3), (3, 0, 3), (3, 0, 2), (4, 0, 2), (4, 0, 4), (3, 0, 4), (3, 0, 3), (4, 0, 3), (4, 0, 5), (3, 0, 5), (3, 0, 4), (4, 0, 4), (4, 0, 6), (3, 0, 6), (3, 0, 5), (4, 0, 5), (4, 0, 7), (3, 0, 7), (3, 0, 6), (4, 0, 6), (5, 0, -5), (4, 0, -5), (4, 0, -6), (5, 0, -6), (5, 0, -4), (4, 0, -4), (4, 0, -5), (5, 0, -5), (5, 0, -3), (4, 0, -3), (4, 0, -4), (5, 0, -4), (5, 0, -2), (4, 0, -2), (4, 0, -3), (5, 0, -3), (5, 0, -1), (4, 0, -1), (4, 0, -2), (5, 0, -2), (5, 0, 0), (4, 0, 0), (4, 0, -1), (5, 0, -1), (5, 0, 1), (4, 0, 1), (4, 0, 0), (5, 0, 0), (5, 0, 2), (4, 0, 2), (4, 0, 1), (5, 0, 1), (5, 0, 3), (4, 0, 3), (4, 0, 2), (5, 0, 2), (5, 0, 4), (4, 0, 4), (4, 0, 3), (5, 0, 3), (5, 0, 5), (4, 0, 5), (4, 0, 4), (5, 0, 4), (5, 0, 6), (4, 0, 6), (4, 0, 5), (5, 0, 5), (5, 0, 7), (4, 0, 7), (4, 0, 6), (5, 0, 6), (6, 0, -5), (5, 0, -5), (5, 0, -6), (6, 0, -6), (6, 0, -4), (5, 0, -4), (5, 0, -5), (6, 0, -5), (6, 0, -3), (5, 0, -3), (5, 0, -4), (6, 0, -4), (6, 0, -2), (5, 0, -2), (5, 0, -3), (6, 0, -3), (6, 0, -1), (5, 0, -1), (5, 0, -2), (6, 0, -2), (6, 0, 0), (5, 0, 0), (5, 0, -1), (6, 0, -1), (6, 0, 1), (5, 0, 1), (5, 0, 0), (6, 0, 0), (6, 0, 2), (5, 0, 2), (5, 0, 1), (6, 0, 1), (6, 0, 3), (5, 0, 3), (5, 0, 2), (6, 0, 2), (6, 0, 4), (5, 0, 4), (5, 0, 3), (6, 0, 3), (6, 0, 5), (5, 0, 5), (5, 0, 4), (6, 0, 4), (6, 0, 6), (5, 0, 6), (5, 0, 5), (6, 0, 5), (6, 0, 7), (5, 0, 7), (5, 0, 6), (6, 0, 6), (7, 0, -5), (6, 0, -5), (6, 0, -6), (7, 0, -6), (7, 0, -4), (6, 0, -4), (6, 0, -5), (7, 0, -5), (7, 0, -3), (6, 0, -3), (6, 0, -4), (7, 0, -4), (7, 0, -2), (6, 0, -2), (6, 0, -3), (7, 0, -3), (7, 0, -1), (6, 0, -1), (6, 0, -2), (7, 0, -2), (7, 0, 0), (6, 0, 0), (6, 0, -1), (7, 0, -1), (7, 0, 1), (6, 0, 1), (6, 0, 0), (7, 0, 0), (7, 0, 2), (6, 0, 2), (6, 0, 1), (7, 0, 1), (7, 0, 3), (6, 0, 3), (6, 0, 2), (7, 0, 2), (7, 0, 4), (6, 0, 4), (6, 0, 3), (7, 0, 3), (7, 0, 5), (6, 0, 5), (6, 0, 4), (7, 0, 4), (7, 0, 6), (6, 0, 6), (6, 0, 5), (7, 0, 5), (7, 0, 7), (6, 0, 7), (6, 0, 6), (7, 0, 6), (-1, 0, -1), (-2, 0, -1), (-2, 0, -2), (-1, 0, -2), (-1, 0, 1), (-2, 0, 1), (-2, 0, 0), (-1, 0, 0), (1, 0, -1), (0, 0, -1), (0, 0, -2), (1, 0, -2), (1, 0, 1), (0, 0, 1), (0, 0, 0), (1, 0, 0), (3, 0, -1), (2, 0, -1), (2, 0, -2), (3, 0, -2), (3, 0, 2), (2, 0, 2), (2, 0, 1), (3, 0, 1)]
        texCoord2f[] primvars:st = [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 0), (0, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 1), (1, 0), (0, 0), (0, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 1), (1, 1), (1, 0), (0, 0)] (
            interpolation = "vertex"
        )
    }

    def Mesh "grass_block_side" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207]
        rel material:binding = </Looks/grass_block_side>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(-6, 0, -6), (-6, 0, -5), (-6, 1, -5), (-6, 1, -6), (-5, 0, -6), (-6, 0, -6), (-6, 1, -6), (-5, 1, -6), (-6, 0, -5), (-6, 0, -4), (-6, 1, -4), (-6, 1, -5), (-6, 0, -4), (-6, 0, -3), (-6, 1, -3), (-6, 1, -4), (-6, 0, -3), (-6, 0, -2), (-6, 1, -2), (-6, 1, -3), (-6, 0, -2), (-6, 0, -1), (-6, 1, -1), (-6, 1, -2), (-6, 0, -1), (-6, 0, 0), (-6, 1, 0), (-6, 1, -1), (-6, 0, 0), (-6, 0, 1), (-6, 1, 1), (-6, 1, 0), (-6, 0, 1), (-6, 0, 2), (-6, 1, 2), (-6, 1, 1), (-6, 0, 2), (-6, 0, 3), (-6, 1, 3), (-6, 1, 2), (-6, 0, 3), (-6, 0, 4), (-6, 1, 4), (-6, 1, 3), (-6, 0, 4), (-6, 0, 5), (-6, 1, 5), (-6, 1, 4), (-6, 0, 5), (-6, 0, 6), (-6, 1, 6), (-6, 1, 5), (-6, 0, 6), (-6, 0, 7), (-6, 1, 7), (-6, 1, 6), (-6, 0, 7), (-5, 0, 7), (-5, 1, 7), (-6, 1, 7), (-4, 0, -6), (-5, 0, -6), (-5, 1, -6), (-4, 1, -6), (-5, 0, 7), (-4, 0, 7), (-4, 1, 7), (-5, 1, 7), (-3, 0, -6), (-4, 0, -6), (-4, 1, -6), (-3, 1, -6), (-4, 0, 7), (-3, 0, 7), (-3, 1, 7), (-4, 1, 7), (-2, 0, -6), (-3, 0, -6), (-3, 1, -6), (-2, 1, -6), (-3, 0, 7), (-2, 0, 7), (-2, 1, 7), (-3, 1, 7), (-1, 0, -6), (-2, 0, -6), (-2, 1, -6), (-1, 1, -6), (-2, 0, 7), (-1, 0, 7), (-1, 1, 7), (-2, 1, 7), (0, 0, -6), (-1, 0, -6), (-1, 1, -6), (0, 1, -6), (-1, 0, 7), (0, 0, 7), (0, 1, 7), (-1, 1, 7), (1, 0, -6), (0, 0, -6), (0, 1, -6), (1, 1, -6), (0, 0, 7), (1, 0, 7), (1, 1, 7), (0, 1, 7), (2, 0, -6), (1, 0, -6), (1, 1, -6), (2, 1, -6), (1, 0, 7), (2, 0, 7), (2, 1, 7), (1, 1, 7), (3, 0, -6), (2, 0, -6), (2, 1, -6), (3, 1, -6), (2, 0, 7), (3, 0, 7), (3, 1, 7), (2, 1, 7), (4, 0, -6), (3, 0, -6), (3, 1, -6), (4, 1, -6), (3, 0, 7), (4, 0, 7), (4, 1, 7), (3, 1, 7), (5, 0, -6), (4, 0, -6), (4, 1, -6), (5, 1, -6), (4, 0, 7), (5, 0, 7), (5, 1, 7), (4, 1, 7), (6, 0, -6), (5, 0, -6), (5, 1, -6), (6, 1, -6), (5, 0, 7), (6, 0, 7), (6, 1, 7), (5, 1, 7), (7, 0, -6), (6, 0, -6), (6, 1, -6), (7, 1, -6), (7, 0, -5), (7, 0, -6), (7, 1, -6), (7, 1, -5), (7, 0, -4), (7, 0, -5), (7, 1, -5), (7, 1, -4), (7, 0, -3), (7, 0, -4), (7, 1, -4), (7, 1, -3), (7, 0, -2), (7, 0, -3), (7, 1, -3), (7, 1, -2), (7, 0, -1), (7, 0, -2), (7, 1, -2), (7, 1, -1), (7, 0, 0), (7, 0, -1), (7, 1, -1), (7, 1, 0), (7, 0, 1), (7, 0, 0), (7, 1, 0), (7, 1, 1), (7, 0, 2), (7, 0, 1), (7, 1, 1), (7, 1, 2), (7, 0, 3), (7, 0, 2), (7, 1, 2), (7, 1, 3), (7, 0, 4), (7, 0, 3), (7, 1, 3), (7, 1, 4), (7, 0, 5), (7, 0, 4), (7, 1, 4), (7, 1, 5), (7, 0, 6), (7, 0, 5), (7, 1, 5), (7, 1, 6), (7, 0, 7), (7, 0, 6), (7, 1, 6), (7, 1, 7), (6, 0, 7), (7, 0, 7), (7, 1, 7), (6, 1, 7)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "iron_block" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
        rel material:binding = </Looks/iron_block>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(0, 1, -2), (0, 1, -1), (0, 2, -1), (0, 2, -2), (1, 1, -2), (0, 1, -2), (0, 2, -2), (1, 2, -2), (1, 1, -1), (1, 1, -2), (1, 2, -2), (1, 2, -1), (0, 2, -1), (1, 2, -1), (1, 2, -2), (0, 2, -2), (0, 1, -1), (1, 1, -1), (1, 2, -1), (0, 2, -1)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "gold_block" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
        rel material:binding = </Looks/gold_block>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(2, 1, -2), (2, 1, -1), (2, 2, -1), (2, 2, -2), (3, 1, -2), (2, 1, -2), (2, 2, -2), (3, 2, -2), (3, 1, -1), (3, 1, -2), (3, 2, -2), (3, 2, -1), (2, 2, -1), (3, 2, -1), (3, 2, -2), (2, 2, -2), (2, 1, -1), (3, 1, -1), (3, 2, -1), (2, 2, -1)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "diamond_block" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
        rel material:binding = </Looks/diamond_block>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(-2, 1, -2), (-2, 1, -1), (-2, 2, -1), (-2, 2, -2), (-1, 1, -2), (-2, 1, -2), (-2, 2, -2), (-1, 2, -2), (-1, 1, -1), (-1, 1, -2), (-1, 2, -2), (-1, 2, -1), (-2, 2, -1), (-1, 2, -1), (-1, 2, -2), (-2, 2, -2), (-2, 1, -1), (-1, 1, -1), (-1, 2, -1), (-2, 2, -1)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "fern" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7]
        rel material:binding = </Looks/fern>
        normal3f[] normals = [(-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107)]
        point3f[] points = [(2.12577, 1, -0.934814), (3.03202, 1, -0.0285645), (3.03202, 2, -0.0285645), (2.12577, 2, -0.934814), (2.12577, 1, -0.0285645), (3.03202, 1, -0.934814), (3.03202, 2, -0.934814), (2.12577, 2, -0.0285645)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "piston_top" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Looks/piston_top>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
        point3f[] points = [(-2, 2, 1), (-1, 2, 1), (-1, 2, 0), (-2, 2, 0)]
        texCoord2f[] primvars:st = [(1, 1), (0, 1), (0, 0), (1, 0)] (
            interpolation = "vertex"
        )
    }

    def Mesh "piston_side" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        rel material:binding = </Looks/piston_side>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(-2, 1, 0), (-2, 1, 1), (-2, 2, 1), (-2, 2, 0), (-1, 1, 0), (-2, 1, 0), (-2, 2, 0), (-1, 2, 0), (-1, 1, 1), (-1, 1, 0), (-1, 2, 0), (-1, 2, 1), (-2, 1, 1), (-1, 1, 1), (-1, 2, 1), (-2, 2, 1)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "rail_corner" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Looks/rail_corner>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
        point3f[] points = [(-1, 1.0625, 1), (-1, 1.0625, 2), (0, 1.0625, 2), (0, 1.0625, 1)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "rail" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Looks/rail>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
        point3f[] points = [(-1, 1.0625, 3), (0, 1.0625, 3), (0, 1.0625, 2), (-1, 1.0625, 2)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "powered_rail" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Looks/powered_rail>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
        point3f[] points = [(-2, 1.0625, 1), (-2, 1.0625, 2), (-1, 1.0625, 2), (-1, 1.0625, 1)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "lava_still" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        rel material:binding = </Looks/lava_still>
        normal3f[] normals = [(-0.0475652, 0.998868, 0), (-0.0475652, 0.998868, 0), (-0.0475652, 0.998868, 0), (-0.0475652, 0.998868, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0.463446, 0.884761, -0.0491534), (0.463446, 0.884761, -0.0491534), (0.463446, 0.884761, -0.0491534), (0.463446, 0.884761, -0.0491534)]
        point3f[] points = [(0, 1.69841, 1), (1, 1.74603, 1), (1, 1.74603, 0), (0, 1.69841, 0), (2, 0, 1), (1, 0, 1), (1, 0, 0), (2, 0, 0), (1, 1.74603, 1), (2, 1.22222, 1), (2, 1.16667, 0), (1, 1.74603, 0)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "chiseled_quartz_block_top" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Looks/chiseled_quartz_block_top>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
        point3f[] points = [(-2, 3, 3), (-1, 3, 3), (-1, 3, 2), (-2, 3, 2)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "chiseled_quartz_block" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        rel material:binding = </Looks/chiseled_quartz_block>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(-2, 2, 2), (-2, 2, 3), (-2, 3, 3), (-2, 3, 2), (-1, 2, 2), (-2, 2, 2), (-2, 3, 2), (-1, 3, 2), (-1, 2, 3), (-1, 2, 2), (-1, 3, 2), (-1, 3, 3), (-2, 2, 3), (-1, 2, 3), (-1, 3, 3), (-2, 3, 3)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "quartz_pillar" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        rel material:binding = </Looks/quartz_pillar>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(-2, 1, 2), (-2, 1, 3), (-2, 2, 3), (-2, 2, 2), (-1, 1, 2), (-2, 1, 2), (-2, 2, 2), (-1, 2, 2), (-1, 1, 3), (-1, 1, 2), (-1, 2, 2), (-1, 2, 3), (-2, 1, 3), (-1, 1, 3), (-1, 2, 3), (-2, 2, 3)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "sunflower_back" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Looks/sunflower_back>
        normal3f[] normals = [(-0.939693, -0.34202, 0), (-0.939693, -0.34202, 0), (-0.939693, -0.34202, 0), (-0.939693, -0.34202, 0)]
        point3f[] points = [(2.53614, 2.99378, 3.06418), (2.53614, 2.99378, 2.06418), (2.87816, 2.05409, 2.06418), (2.87816, 2.05409, 3.06418)]
        texCoord2f[] primvars:st = [(0, 1), (1, 1), (1, 0), (0, 0)] (
            interpolation = "vertex"
        )
    }

    def Mesh "sunflower_front" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Looks/sunflower_front>
        normal3f[] normals = [(0.939693, 0.34202, 0), (0.939693, 0.34202, 0), (0.939693, 0.34202, 0), (0.939693, 0.34202, 0)]
        point3f[] points = [(2.54202, 2.99592, 2.06418), (2.54202, 2.99592, 3.06418), (2.88404, 2.05622, 3.06418), (2.88404, 2.05622, 2.06418)]
        texCoord2f[] primvars:st = [(1, 1), (0, 1), (0, 0), (1, 0)] (
            interpolation = "vertex"
        )
    }

    def Mesh "sunflower_bottom" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7]
        rel material:binding = </Looks/sunflower_bottom>
        normal3f[] normals = [(-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107)]
        point3f[] points = [(2.14447, 1, 2.09855), (3.05072, 1, 3.0048), (3.05072, 2, 3.0048), (2.14447, 2, 2.09855), (2.14447, 1, 3.0048), (3.05072, 1, 2.09855), (3.05072, 2, 2.09855), (2.14447, 2, 3.0048)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "sunflower_top" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7]
        rel material:binding = </Looks/sunflower_top>
        normal3f[] normals = [(-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (-0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107), (0.707107, 0, 0.707107)]
        point3f[] points = [(2.14447, 2, 2.09855), (3.05072, 2, 3.0048), (3.05072, 3, 3.0048), (2.14447, 3, 2.09855), (2.14447, 2, 3.0048), (3.05072, 2, 2.09855), (3.05072, 3, 2.09855), (2.14447, 3, 3.0048)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "purple_stained_glass" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        int[] faceVertexCounts = [4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
        rel material:binding = </Looks/purple_stained_glass>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(0, 1, 2), (0, 1, 3), (0, 2, 3), (0, 2, 2), (1, 1, 2), (0, 1, 2), (0, 2, 2), (1, 2, 2), (1, 1, 3), (1, 1, 2), (1, 2, 2), (1, 2, 3), (0, 2, 3), (1, 2, 3), (1, 2, 2), (0, 2, 2), (0, 1, 3), (1, 1, 3), (1, 2, 3), (0, 2, 3)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "prismarine" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
        rel material:binding = </Looks/prismarine>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(2, 1, 1), (2, 1, 2), (2, 2, 2), (2, 2, 1), (3, 1, 1), (2, 1, 1), (2, 2, 1), (3, 2, 1), (3, 1, 2), (3, 1, 1), (3, 2, 1), (3, 2, 2), (2, 2, 2), (3, 2, 2), (3, 2, 1), (2, 2, 1), (2, 1, 2), (3, 1, 2), (3, 2, 2), (2, 2, 2)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
    }

    def Mesh "lava_flow" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        rel material:binding = </Looks/lava_flow>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(0, 1, 0), (0, 1, 1), (0, 1.69841, 1), (0, 1.69841, 0), (1, 1, 0), (0, 1, 0), (0, 1.69841, 0), (1, 1.74603, 0), (0, 1, 1), (1, 1, 1), (1, 1.74603, 1), (0, 1.69841, 1), (2, 1, 0), (1, 1, 0), (1, 1.74603, 0), (2, 1.16667, 0), (2, 1, 1), (2, 1, 0), (2, 1.16667, 0), (2, 1.22222, 1), (1, 1, 1), (2, 1, 1), (2, 1.22222, 1), (1, 1.74603, 1)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 0.699219), (0, 0.699219), (0, 0), (1, 0), (1, 0.699219), (0, 0.746094), (0, 0), (1, 0), (1, 0.746094), (0, 0.699219), (0, 0), (1, 0), (1, 0.746094), (0, 0.167969), (0, 0), (1, 0), (1, 0.167969), (0, 0.222656), (0, 0), (1, 0), (1, 0.222656), (0, 0.746094)] (
            interpolation = "vertex"
        )
    }
}

def Scope "Looks" (
    kind = "model"
)
{
    def Material "grass_block_top"
    {
        token outputs:displacement.connect = </Looks/grass_block_top/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/grass_block_top/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/grass_block_top/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/grass_block_top/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/grass_block_top/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/grass_block_top_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/grass_block_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1, -1, -1, 0)
            asset inputs:file = @./McUsd_materials/tex/grass_block_top_n.png@
            float4 inputs:scale = (2, 2, 2, 1)
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/grass_block_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/grass_block_top_y.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/grass_block_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "dirt"
    {
        token outputs:displacement.connect = </Looks/dirt/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/dirt/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/dirt/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/dirt/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/dirt/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/dirt_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/dirt/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/dirt_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/dirt/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/dirt.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/dirt/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "grass_block_side"
    {
        token outputs:displacement.connect = </Looks/grass_block_side/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/grass_block_side/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/grass_block_side/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/grass_block_side/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/grass_block_side_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/grass_block_side/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "clamp"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/grass_block_side_y.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/grass_block_side/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "clamp"
            color3f outputs:rgb
        }
    }

    def Material "iron_block"
    {
        token outputs:displacement.connect = </Looks/iron_block/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/iron_block/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Looks/iron_block/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/iron_block/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/iron_block/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/iron_block/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/iron_block_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/iron_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/iron_block_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/iron_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/iron_block_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/iron_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/iron_block.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/iron_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "gold_block"
    {
        token outputs:displacement.connect = </Looks/gold_block/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/gold_block/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.996078, 0.968627, 0.305882)
            color3f inputs:diffuseColor.connect = </Looks/gold_block/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/gold_block/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/gold_block/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/gold_block/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/gold_block_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/gold_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/gold_block_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/gold_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/gold_block_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/gold_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/gold_block.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/gold_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "diamond_block"
    {
        token outputs:displacement.connect = </Looks/diamond_block/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/diamond_block/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.498039, 0.890196, 0.87451)
            color3f inputs:diffuseColor.connect = </Looks/diamond_block/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/diamond_block/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/diamond_block/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/diamond_block/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/diamond_block_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/diamond_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/diamond_block_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/diamond_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/diamond_block_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/diamond_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/diamond_block.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/diamond_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "fern"
    {
        token outputs:displacement.connect = </Looks/fern/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/fern/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/fern/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            float inputs:opacity.connect = </Looks/fern/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/fern_y.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/fern/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "piston_top"
    {
        token outputs:displacement.connect = </Looks/piston_top/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/piston_top/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.584314, 0.466667, 0.294118)
            color3f inputs:diffuseColor.connect = </Looks/piston_top/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/piston_top/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/piston_top/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/piston_top/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/piston_top_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/piston_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/piston_top_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/piston_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/piston_top_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/piston_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/piston_top.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/piston_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "piston_side"
    {
        token outputs:displacement.connect = </Looks/piston_side/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/piston_side/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.584314, 0.466667, 0.294118)
            color3f inputs:diffuseColor.connect = </Looks/piston_side/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/piston_side/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/piston_side/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/piston_side_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/piston_side/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/piston_side_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/piston_side/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/piston_side.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/piston_side/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "rail_corner"
    {
        token outputs:displacement.connect = </Looks/rail_corner/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/rail_corner/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.407843, 0.407843, 0.407843)
            color3f inputs:diffuseColor.connect = </Looks/rail_corner/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/rail_corner/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/rail_corner/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/rail_corner/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness.connect = </Looks/rail_corner/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/rail_corner_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/rail_corner/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/rail_corner_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/rail_corner/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/rail_corner_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/rail_corner/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/rail_corner.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/rail_corner/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "rail"
    {
        token outputs:displacement.connect = </Looks/rail/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/rail/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.407843, 0.407843, 0.407843)
            color3f inputs:diffuseColor.connect = </Looks/rail/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/rail/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/rail/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/rail/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness.connect = </Looks/rail/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/rail_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/rail_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/rail_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/rail.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "powered_rail"
    {
        token outputs:displacement.connect = </Looks/powered_rail/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/powered_rail/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.670588, 0.0117647, 0.00392157)
            color3f inputs:diffuseColor.connect = </Looks/powered_rail/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/powered_rail/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/powered_rail/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/powered_rail/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness.connect = </Looks/powered_rail/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/powered_rail_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/powered_rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/powered_rail_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/powered_rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/powered_rail_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/powered_rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/powered_rail.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/powered_rail/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "repeat"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lava_still"
    {
        token outputs:displacement.connect = </Looks/lava_still/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/lava_still/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.960784, 0.427451, 0)
            color3f inputs:diffuseColor.connect = </Looks/lava_still/DiffuseTexture.outputs:rgb>
            color3f inputs:emissiveColor.connect = </Looks/lava_still/EmissiveTexture.outputs:rgb>
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/lava_still.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/lava_still/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }

        def Shader "EmissiveTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/lava_still_e.png@
            float4 inputs:scale = (20, 20, 20, 1)
            float2 inputs:st.connect = </Looks/lava_still/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }
    }

    def Material "chiseled_quartz_block_top"
    {
        token outputs:displacement.connect = </Looks/chiseled_quartz_block_top/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/chiseled_quartz_block_top/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Looks/chiseled_quartz_block_top/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/chiseled_quartz_block_top/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/chiseled_quartz_block_top/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_top_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/chiseled_quartz_block_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_top_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/chiseled_quartz_block_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_top.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/chiseled_quartz_block_top/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "chiseled_quartz_block"
    {
        token outputs:displacement.connect = </Looks/chiseled_quartz_block/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/chiseled_quartz_block/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Looks/chiseled_quartz_block/DiffuseTexture.outputs:rgb>
            float inputs:metallic.connect = </Looks/chiseled_quartz_block/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/chiseled_quartz_block/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/chiseled_quartz_block/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/chiseled_quartz_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/chiseled_quartz_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/chiseled_quartz_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/chiseled_quartz_block/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "quartz_pillar"
    {
        token outputs:displacement.connect = </Looks/quartz_pillar/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/quartz_pillar/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Looks/quartz_pillar/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/quartz_pillar/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/quartz_pillar/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/quartz_pillar_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/quartz_pillar/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/quartz_pillar_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/quartz_pillar/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/quartz_pillar.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/quartz_pillar/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "sunflower_back"
    {
        token outputs:displacement.connect = </Looks/sunflower_back/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/sunflower_back/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/sunflower_back/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/sunflower_back/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/sunflower_back/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness.connect = </Looks/sunflower_back/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_back_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_back/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/sunflower_back_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_back/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_back.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/sunflower_back/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sunflower_front"
    {
        token outputs:displacement.connect = </Looks/sunflower_front/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/sunflower_front/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/sunflower_front/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/sunflower_front/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/sunflower_front/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness.connect = </Looks/sunflower_front/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_front_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_front/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/sunflower_front_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_front/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_front.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/sunflower_front/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sunflower_bottom"
    {
        token outputs:displacement.connect = </Looks/sunflower_bottom/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/sunflower_bottom/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/sunflower_bottom/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/sunflower_bottom/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/sunflower_bottom/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness.connect = </Looks/sunflower_bottom/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_bottom_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_bottom/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/sunflower_bottom_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_bottom/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_bottom.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/sunflower_bottom/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sunflower_top"
    {
        token outputs:displacement.connect = </Looks/sunflower_top/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/sunflower_top/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Looks/sunflower_top/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/sunflower_top/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/sunflower_top/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness.connect = </Looks/sunflower_top/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_top_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_top/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/sunflower_top_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/sunflower_top/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/sunflower_top.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/sunflower_top/UVReader.outputs:result>
            token inputs:wrapS = "clamp"
            token inputs:wrapT = "clamp"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_stained_glass"
    {
        token outputs:displacement.connect = </Looks/purple_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/purple_stained_glass/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Looks/purple_stained_glass/DiffuseTexture.outputs:rgb>
            float inputs:ior = 1.52
            float inputs:metallic.connect = </Looks/purple_stained_glass/MetallicTexture.outputs:r>
            normal3f inputs:normal.connect = </Looks/purple_stained_glass/NormalTexture.outputs:rgb>
            float inputs:opacity.connect = </Looks/purple_stained_glass/DiffuseTexture.outputs:a>
            float inputs:opacityThreshold = 0
            float inputs:roughness.connect = </Looks/purple_stained_glass/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/purple_stained_glass_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/purple_stained_glass/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/purple_stained_glass_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/purple_stained_glass/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "MetallicTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/purple_stained_glass_m.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/purple_stained_glass/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/purple_stained_glass.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/purple_stained_glass/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "prismarine"
    {
        token outputs:displacement.connect = </Looks/prismarine/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/prismarine/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.4, 0.678431, 0.631373)
            color3f inputs:diffuseColor.connect = </Looks/prismarine/DiffuseTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/prismarine/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness.connect = </Looks/prismarine/RoughnessTexture.outputs:r>
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "RoughnessTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/prismarine_r.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/prismarine/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/prismarine_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/prismarine/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/prismarine.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/prismarine/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }
    }

    def Material "lava_flow"
    {
        token outputs:displacement.connect = </Looks/lava_flow/PreviewSurface.outputs:displacement>
        token outputs:surface.connect = </Looks/lava_flow/PreviewSurface.outputs:surface>

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.960784, 0.427451, 0)
            color3f inputs:diffuseColor.connect = </Looks/lava_flow/DiffuseTexture.outputs:rgb>
            color3f inputs:emissiveColor.connect = </Looks/lava_flow/EmissiveTexture.outputs:rgb>
            float inputs:metallic = 0
            normal3f inputs:normal.connect = </Looks/lava_flow/NormalTexture.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:out
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }

        def Shader "NormalTexture"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:bias = (-1.0, 1.0, -1.0, -1.0)
            float4 inputs:scale = (2.0, -2.0, 2.0, 2.0)
            asset inputs:file = @./McUsd_materials/tex/lava_flow_n.png@
            token inputs:sourceColorSpace = "raw"
            float2 inputs:st.connect = </Looks/lava_flow/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "DiffuseTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/lava_flow.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Looks/lava_flow/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            color3f outputs:rgb
        }

        def Shader "EmissiveTexture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./McUsd_materials/tex/lava_flow_e.png@
            float4 inputs:scale = (20, 20, 20, 1)
            float2 inputs:st.connect = </Looks/lava_flow/UVReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }
    }
}
