#usda 1.0
(
    defaultPrim = "Environment"
    metersPerUnit = 0.01
    upAxis = "Z"
)

def Xform "Environment"
{
    def Mesh "Plane" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-50, -50, 0), (50, 50, 0)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </Environment/Looks/Floor> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, 0), (50, -50, 0), (-50, 50, 0), (50, 50, 0)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "Floor"
        {
            token outputs:displacement.connect = </Environment/Looks/Floor/Shader.outputs:displacement>
            token outputs:surface.connect = </Environment/Looks/Floor/Shader.outputs:surface>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:clearcoatRoughness = 0.01 (
                    customData = {
                        float default = 0.01
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                color3f inputs:diffuseColor = (0.24092412, 0.2409217, 0.2409217) (
                    customData = {
                        float3 default = (0.18, 0.18, 0.18)
                    }
                    hidden = false
                    renderType = "color"
                )
                float inputs:displacement = 0 (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                )
                color3f inputs:emissiveColor = (0, 0, 0) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                float inputs:ior = 1.5 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    hidden = false
                )
                float inputs:metallic = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                normal3f inputs:normal = (0, 0, 1) (
                    customData = {
                        float3 default = (0, 0, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (-1, -1, -1)
                        }
                    }
                    hidden = false
                )
                float inputs:occlusion = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                )
                float inputs:opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:opacityThreshold = 0 (
                    connectability = "interfaceOnly"
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                float inputs:roughness = 0.88 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                )
                color3f inputs:specularColor = (0, 0, 0) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                int inputs:useSpecularWorkflow = 0 (
                    connectability = "interfaceOnly"
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                        string widgetType = "checkBox"
                    }
                    hidden = false
                )
                token outputs:displacement (
                    renderType = "material"
                )
                token outputs:surface (
                    renderType = "material"
                )
            }
        }
    }

    def Xform "Lights" (
        kind = "group"
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 180)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        float3 xformOp:translate:pivot = (1.5357075, 0.21449234, 14.666749)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

        def SphereLight "SphereLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            bool inputs:enableColorTemperature = 0
            float inputs:intensity = 30
            bool inputs:normalize = 0
            float inputs:radius = 5
            float inputs:shaping:cone:angle = 180
            float inputs:shaping:cone:softness
            float inputs:shaping:focus
            color3f inputs:shaping:focusTint
            asset inputs:shaping:ies:file
            bool treatAsPoint = 0
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (90, 0, 90)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (14.322887909190378, -17.2293109742687, 14.66674891635296)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def SphereLight "SphereLight_01" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            float inputs:intensity = 1
            bool inputs:normalize = 0
            float inputs:radius = 5
            float inputs:shaping:cone:angle = 180
            float inputs:shaping:cone:softness
            float inputs:shaping:focus
            color3f inputs:shaping:focusTint
            asset inputs:shaping:ies:file
            bool treatAsPoint = 0
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (90, 0, 90)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (14.322887909189646, 17.65829566005661, 14.66674891635275)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def SphereLight "SphereLight_02" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            bool inputs:enableColorTemperature = 0
            float inputs:intensity = 10
            bool inputs:normalize = 0
            float inputs:radius = 5
            float inputs:shaping:cone:angle = 180
            float inputs:shaping:cone:softness
            float inputs:shaping:focus
            color3f inputs:shaping:focusTint
            asset inputs:shaping:ies:file
            bool treatAsPoint = 0
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (90, 0, 90)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-11.251472983209544, 3.022866241167028, 14.666748916353484)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }
}

